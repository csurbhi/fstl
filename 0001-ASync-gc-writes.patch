From b568e06c482ae4caa6f8131529abeefee36e0c94 Mon Sep 17 00:00:00 2001
From: Surbhi Palande <csurbhi@gmail.com>
Date: Mon, 17 Apr 2023 16:06:29 -0700
Subject: [PATCH] ASync gc writes.

Needs debugging

Signed-off-by: Surbhi Palande <csurbhi@gmail.com>
---
 lsdm.c     | 87 +++++++++++++++++++++++++++++++++++++++++++-----------
 metadata.h |  7 +++++
 2 files changed, 77 insertions(+), 17 deletions(-)

diff --git a/lsdm.c b/lsdm.c
index c959e8c..54c7b32 100644
--- a/lsdm.c
+++ b/lsdm.c
@@ -1277,7 +1277,60 @@ void move_gc_write_frontier(struct ctx *ctx, sector_t sectors_s8);
 static int setup_extent_bio_write(struct ctx *ctx, struct gc_extents *gc_extent);
 static void add_revmap_entry(struct ctx *, __le64, __le64, int);
 struct tm_page *add_tm_page_kv_store(struct ctx *, sector_t);
-int add_translation_entry(struct ctx *, sector_t , sector_t , size_t ); 
+int add_translation_entry(struct ctx *, sector_t , sector_t , size_t );
+
+void sub_gcwrite_done(struct work_struct * w)
+{
+	struct lsdm_gcctx *gcctx = NULL;
+	struct gc_extents *gc_extent;
+	struct ctx *ctx;
+	int ret;
+
+	gcctx = container_of(w, struct lsdm_gcctx, work);
+	ctx = gcctx->ctx;
+	gc_extent = gcctx->gc_extent;
+	/* task completed successfully */
+	//down_write(&ctx->lsdm_rev_lock);
+	/*---------------------*/
+	//add_revmap_entry(ctx, gc_extent->e.lba, gc_extent->e.pba, gc_extent->e.len);
+	/*---------------------*/
+	//up_write(&ctx->lsdm_rev_lock);
+	add_translation_entry(ctx, gc_extent->e.lba, gc_extent->e.pba, gc_extent->e.len);
+	//printk(KERN_ERR "\n %s About to add: lba: %llu pba: %llu , len: %llu e.len: %llu" , __func__, gc_extent->e.lba, gc_extent->e.pba, s8, gc_extent->e.len);
+	ret = lsdm_rb_update_range(ctx, gc_extent->e.lba, gc_extent->e.pba, gc_extent->e.len);
+	//printk(KERN_ERR "\n %s Added rb entry ! lba: %llu pba: %llu , len: %llu e.len: %llu" , __func__, gc_extent->e.lba, gc_extent->e.pba, s8, gc_extent->e.len);
+	move_gc_write_frontier(ctx, gc_extent->e.len);
+	kmem_cache_free(ctx->gcctx_cache, gcctx);
+	ctx->nr_gc_writes += gc_extent->e.len;
+	return;
+}
+
+/* can you create the translation entry here?
+ * What happens if you put a translation entry
+ * for some data that did not make it to
+ * the disk? Partial writes to such block
+ * entries can end up rewriting data that
+ * is partially uptodate and correct, and partially
+ * stale and wrong. Thus there should be no wrong
+ * entry in the translation map.
+ */
+void lsdm_gcwrite_end(struct bio * bio)
+{
+	struct lsdm_gcctx *gcctx = NULL;
+	struct ctx *ctx;
+
+	gcctx = bio->bi_private;
+	ctx = gcctx->ctx;
+	if (bio->bi_status != BLK_STS_OK) {
+		ctx->err = 1;
+		panic("GC write failed!");
+	}
+	INIT_WORK(&gcctx->work, sub_gcwrite_done);
+	queue_work(ctx->writes_wq, &gcctx->work);
+	return;
+}
+
+
 /* 
  * The extent that we are about to write will definitely fit into
  * the gc write frontier. No one is writing to the gc frontier
@@ -1291,7 +1344,7 @@ int add_translation_entry(struct ctx *, sector_t , sector_t , size_t );
 static int write_gc_extent(struct ctx *ctx, struct gc_extents *gc_extent)
 {
 	struct bio *bio;
-	struct gc_ctx *gc_ctx;
+	struct lsdm_gcctx *gcctx;
 	struct tm_page * tm_page = NULL;
 	sector_t s8;
 	int trials = 0;
@@ -1316,21 +1369,14 @@ static int write_gc_extent(struct ctx *ctx, struct gc_extents *gc_extent)
 	BUG_ON(gc_extent->e.lba >= ctx->sb->max_pba);
 #endif
 	bio->bi_status = BLK_STS_OK;
-	submit_bio_wait(bio);
-	ctx->nr_gc_writes += s8;
-	if (bio->bi_status != BLK_STS_OK) {
-		panic("GC writes failed! Perhaps a resource error");
+
+	gcctx = kmem_cache_alloc(ctx->gcctx_cache, GFP_KERNEL);
+	if (!gcctx) {
+		panic("\n could not allocate memory to gcctx ");
 	}
-	//down_write(&ctx->lsdm_rev_lock);
-	/*---------------------*/
-	//add_revmap_entry(ctx, gc_extent->e.lba, gc_extent->e.pba, gc_extent->e.len);
-	/*---------------------*/
-	//up_write(&ctx->lsdm_rev_lock);
-	add_translation_entry(ctx, gc_extent->e.lba, gc_extent->e.pba, gc_extent->e.len);
-	//printk(KERN_ERR "\n %s About to add: lba: %llu pba: %llu , len: %llu e.len: %llu" , __func__, gc_extent->e.lba, gc_extent->e.pba, s8, gc_extent->e.len);
-	ret = lsdm_rb_update_range(ctx, gc_extent->e.lba, gc_extent->e.pba, gc_extent->e.len);
-	//printk(KERN_ERR "\n %s Added rb entry ! lba: %llu pba: %llu , len: %llu e.len: %llu" , __func__, gc_extent->e.lba, gc_extent->e.pba, s8, gc_extent->e.len);
-	move_gc_write_frontier(ctx, gc_extent->e.len);
+	gcctx->ctx = ctx;
+	gcctx->gc_extent = gc_extent;
+	submit_bio(bio);
 	return 0;
 }
 
@@ -1383,6 +1429,7 @@ static int setup_extent_bio_write(struct ctx *ctx, struct gc_extents *gc_extent)
 	//printk(KERN_ERR "\n %s bio_sectors(bio): %llu nr_pages: %d", __func__,  bio_sectors(bio), bio_pages);
 	bio_set_dev(bio, ctx->dev->bdev);
 	bio_set_op_attrs(bio, REQ_OP_WRITE, 0);
+	bio->bi_end_io = lsdm_gcwrite_end;
 	gc_extent->bio = bio;
 	return 0;
 }
@@ -6226,6 +6273,7 @@ static void destroy_caches(struct ctx *ctx)
 	kmem_cache_destroy(ctx->sit_page_cache);
 	kmem_cache_destroy(ctx->revmap_bioctx_cache);
 	kmem_cache_destroy(ctx->bioctx_cache);
+	kmem_cache_destroy(ctx->gcctx_cache);
 }
 
 
@@ -6281,8 +6329,13 @@ static int create_caches(struct ctx *ctx)
 	if (!ctx->bio_cache) {
 		goto destroy_rev_extent_cache;
 	}
-
+	ctx->gcctx_cache = kmem_cache_create("gcctx_cache", sizeof(struct lsdm_gcctx), 0, SLAB_RED_ZONE|SLAB_ACCOUNT, NULL);
+	if (!ctx->gcctx_cache) {
+		goto destroy_bio_cache;
+	}
 	return 0;
+destroy_bio_cache:
+	kmem_cache_destroy(ctx->bio_cache);
 /* failed case */
 destroy_rev_extent_cache:
 	kmem_cache_destroy(ctx->rev_extent_cache);
diff --git a/metadata.h b/metadata.h
index 0f34b4f..15e9bc5 100644
--- a/metadata.h
+++ b/metadata.h
@@ -207,6 +207,12 @@ struct gc_extents {
 	struct list_head list;
 };
 
+struct lsdm_gcctx {
+	struct ctx * ctx;
+	struct gc_extents * gc_extent;
+	struct work_struct work;
+};
+
 struct mykref {
 	refcount_t refcount;
 };
@@ -287,6 +293,7 @@ struct ctx {
 	struct kmem_cache * extent_cache;
 	struct kmem_cache * rev_extent_cache;
 	struct kmem_cache * subbio_ctx_cache;
+	struct kmem_cache * gcctx_cache;
 	struct kmem_cache * revmap_bioctx_cache;
 	struct kmem_cache * sit_page_cache;
 	struct kmem_cache *reflist_cache;
-- 
2.34.1

