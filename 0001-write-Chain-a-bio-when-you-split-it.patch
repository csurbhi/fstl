From 23b48c233b9e8598197b9f72d1ebcf90b4ccd49d Mon Sep 17 00:00:00 2001
From: Surbhi Palande <csurbhi@gmail.com>
Date: Mon, 13 Mar 2023 15:23:23 -0700
Subject: [PATCH] write: Chain a bio when you split it.

Signed-off-by: Surbhi Palande <csurbhi@gmail.com>
---
 lsdm.c            |  38 ++++----
 write_fullzones.c | 241 ++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 259 insertions(+), 20 deletions(-)
 create mode 100644 write_fullzones.c

diff --git a/lsdm.c b/lsdm.c
index 6a4c1f5..82670f7 100644
--- a/lsdm.c
+++ b/lsdm.c
@@ -2159,7 +2159,7 @@ int handle_partial_overlap(struct ctx *ctx, struct bio * bio, struct bio *clone,
 {
 	struct bio * split;
 
-	printk(KERN_ERR "\n clone: %p clone::nr_sectors: %d len: %d ", clone, bio_sectors(clone), overlap);
+	//printk(KERN_ERR "\n clone: %p clone::nr_sectors: %d len: %d ", clone, bio_sectors(clone), overlap);
 	split = bio_split(clone, overlap, GFP_KERNEL, &fs_bio_set);
 	if (!split) {
 		printk(KERN_INFO "\n Could not split the clone! ERR ");
@@ -2168,12 +2168,12 @@ int handle_partial_overlap(struct ctx *ctx, struct bio * bio, struct bio *clone,
 		zero_fill_clone(ctx, read_ctx, clone);
 		return -ENOMEM;
 	}
-	printk(KERN_ERR "\n 2. (SPLIT) %s lba: %llu, pba: %llu nr_sectors: %d ", __func__, split->bi_iter.bi_sector, pba, bio_sectors(split));
+	//printk(KERN_ERR "\n 2. (SPLIT) %s lba: %llu, pba: %llu nr_sectors: %d ", __func__, split->bi_iter.bi_sector, pba, bio_sectors(split));
 	bio_chain(split, clone);
 	split->bi_iter.bi_sector = pba;
 	bio_set_dev(split, ctx->dev->bdev);
 	BUG_ON(pba > ctx->sb->max_pba);
-	printk(KERN_ERR "\n %s submitted split! ", __func__);
+	//printk(KERN_ERR "\n %s submitted split! ", __func__);
 	submit_bio(split);
 	return 0;
 }
@@ -2184,19 +2184,19 @@ int handle_full_overlap(struct ctx *ctx, struct bio * bio, struct bio *clone, se
 	sector_t s8;
 	struct bio *split;
 
-	printk(KERN_ERR "\n %s pba: %llu len: %llu \n", __func__, pba, nr_sectors);
+	//printk(KERN_ERR "\n %s pba: %llu len: %llu \n", __func__, pba, nr_sectors);
 
 	s8 = round_down(nr_sectors, NR_SECTORS_IN_BLK);
 	if (nr_sectors == s8) {
-		printk(KERN_ERR "\n %s aligned read \n", __func__);
+		//printk(KERN_ERR "\n %s aligned read \n", __func__);
 		atomic_inc(&ctx->nr_reads);
 		clone->bi_end_io = lsdm_subread_done;
 		clone->bi_iter.bi_sector = pba;
 		bio_set_dev(clone, ctx->dev->bdev);
-		printk(KERN_ERR "\n %s aligned read submitting....\n", __func__);
+		//printk(KERN_ERR "\n %s aligned read submitting....\n", __func__);
 		submit_bio(clone);
 	} else {
-		printk(KERN_ERR "\n %s Unaligned read \n", __func__);
+		//printk(KERN_ERR "\n %s Unaligned read \n", __func__);
 		/* nr_sectors is not divisible by NR_SECTORS_IN_BLK*/
 		if (nr_sectors > NR_SECTORS_IN_BLK) {
 			split = bio_split(clone, s8, GFP_NOIO, &fs_bio_set);
@@ -2225,7 +2225,7 @@ int handle_full_overlap(struct ctx *ctx, struct bio * bio, struct bio *clone, se
 			printk(KERN_ERR "\n %s could not construct smaller bio! \n");
 			bio_endio(read_ctx->clone);
 		}
-		printk(KERN_ERR "\n %s (smaller read) -> lba: %llu pba:%llu len:%d", __func__, read_ctx->lba, clone->bi_iter.bi_sector, nr_sectors);
+		//printk(KERN_ERR "\n %s (smaller read) -> lba: %llu pba:%llu len:%d", __func__, read_ctx->lba, clone->bi_iter.bi_sector, nr_sectors);
 		submit_bio(clone);
 	}	
 	BUG_ON(pba > ctx->sb->max_pba);
@@ -2289,11 +2289,12 @@ static int lsdm_read_io(struct ctx *ctx, struct bio *bio)
 		/* case of no overlap */
 		if ((e == NULL) || (e->lba >= (lba + nr_sectors)) || ((e->lba + e->len) <= lba))  {
 			zero_fill_clone(ctx, read_ctx, clone);
-			printk(KERN_ERR "\n case of zero overlap!");
+			//printk(KERN_ERR "\n case of zero overlap!");
 			break;
 		}
-		printk(KERN_ERR "\n %s Searching: origlba: %llu lba: %llu len: %lu. Found e->lba: %llu, e->pba: %llu, e->len: %lu \n", 
+		/*printk(KERN_ERR "\n %s Searching: origlba: %llu lba: %llu len: %lu. Found e->lba: %llu, e->pba: %llu, e->len: %lu \n", 
 				__func__, origlba, lba, nr_sectors, e->lba, e->pba, e->len);
+		 */
 
 		/* Case of Overlap, e always overlaps with bio */
 		if (e->lba > lba) {
@@ -2301,7 +2302,7 @@ static int lsdm_read_io(struct ctx *ctx, struct bio *bio)
 		 *	[---------bio------] 
 		 */
 			zerolen = e->lba - lba;
-			printk(KERN_ERR "\n Case of partial overlap! (no left overlap)");
+			//printk(KERN_ERR "\n Case of partial overlap! (no left overlap)");
 			ret = zero_fill_inital_bio(ctx, bio, clone, zerolen, read_ctx);
 			if (!ret)
 				return ret;
@@ -2321,29 +2322,29 @@ static int lsdm_read_io(struct ctx *ctx, struct bio *bio)
 		diff = lba - e->lba;
 		BUG_ON(diff < 0);
 		pba = e->pba + diff;
-		printk(KERN_ERR "\n %s overlap: %llu, nr_sectors: %llu diff: %d", __func__, overlap, nr_sectors, diff);
+		//printk(KERN_ERR "\n %s overlap: %llu, nr_sectors: %llu diff: %d", __func__, overlap, nr_sectors, diff);
 		if (overlap >= nr_sectors) { 
 		/* e is bigger than bio, so overlap >= nr_sectors, no further
 		 * splitting is required. Previous splits if any, are chained
 		 * to the last one as 'clone' is their parent.
 		 */
 			ret = handle_full_overlap(ctx, bio, clone, nr_sectors, pba, read_ctx);
-			printk(KERN_ERR "\n 1) ret: %d ", ret);
+			//printk(KERN_ERR "\n 1) ret: %d ", ret);
 			if (ret)
 				return ret;
 			break;
 
 		} else {
 			/* overlap is smaller than nr_sectors remaining. */
-			printk(KERN_ERR "\n clone: %p clone::nr_sectors: %d e->len: %d overlap: %d", clone, bio_sectors(clone), e->len, overlap);
+			//printk(KERN_ERR "\n clone: %p clone::nr_sectors: %d e->len: %d overlap: %d", clone, bio_sectors(clone), e->len, overlap);
 			ret = handle_partial_overlap(ctx, bio, clone, overlap, read_ctx, pba);
-			printk(KERN_ERR "\n 2) ret: %d clone::lba: %llu", ret, clone->bi_iter.bi_sector);
+			//printk(KERN_ERR "\n 2) ret: %d clone::lba: %llu", ret, clone->bi_iter.bi_sector);
 			if (ret)
 				return ret;
 			/* Since e was smaller, we want to search for the next e */
 		}
 	}
-	printk(KERN_INFO "\t %s end \n", __func__);
+	//printk(KERN_INFO "\t %s end \n", __func__);
 	return 0;
 }
 
@@ -4749,10 +4750,7 @@ struct bio * split_submit(struct ctx *ctx, struct bio *clone, sector_t s8, secto
 	 */
 again:
 	split->bi_iter.bi_sector = lba;
-	split->bi_private = bioctx;
-	/* Next we fetch the LBA that our DM got */
-	if (prepare_bio(ctx, split, s8, wf))
-		goto fail;
+	bio_chain(split, clone);
 	//printk(KERN_ERR "\n %s Submitting lba: {%llu, pba: %llu, len: %d},", __func__, lba, wf, subbio_ctx->extent.len);
 	submit_bio(split);
 	/* we return the second part */
diff --git a/write_fullzones.c b/write_fullzones.c
new file mode 100644
index 0000000..da67f3c
--- /dev/null
+++ b/write_fullzones.c
@@ -0,0 +1,241 @@
+#include <stdio.h>
+#define _LARGEFILE64_SOURCE
+#define __USE_FILE_OFFSET64 
+#include <sys/types.h>
+#include <unistd.h>
+#include <errno.h>
+#include <sys/stat.h>
+#define __USE_FILE_OFFSET64 
+#include <fcntl.h>
+#include <linux/blkzoned.h>
+#include <assert.h>
+#include <stdlib.h>
+#include <sys/ioctl.h>
+
+
+#define NRZONES 1
+#define NR_BLKS_IN_ZONE 8
+#define BLKSZ 512
+
+//char * fname = "/mnt/test";
+//char * fname = "/dev/dm-0";
+//char * fname = "/dev/sdb";
+char * fname;
+
+
+int report_zone(unsigned long zonenr)
+{
+	struct blk_zone_report * bzr;
+	int ret;
+	long i = 0, fd = 0;
+
+	fd = open(fname, O_RDWR);
+	if (!fd) {
+		perror("Could not open the disk: ");
+		return -1;
+	}
+	printf("\n %s opened %s with fd: %ld ", __func__, "/dev/sdb", fd);
+
+	bzr = malloc(sizeof(struct blk_zone_report) + sizeof(struct blk_zone) * 256);
+
+	bzr->sector = 244842496 + (zonenr * 65536 * 8);
+	bzr->nr_zones = 1;
+
+	ret = ioctl(fd, BLKREPORTZONE, bzr);
+	if (ret) {
+		fprintf(stderr, "\n blkreportzone for zonenr: %ld ioctl failed, ret: %d ", zonenr, ret);
+		perror("\n blkreportzone failed because: ");
+		return -1;
+	}
+	assert(bzr->nr_zones <= 256);
+	for (i=0; i<bzr->nr_zones; i++) {
+		printf("\n-----------------------------------");
+		printf("\n Zonenr: %ld ", i);
+		printf("\n start: %lld ", bzr->zones[i].start);
+		printf("\n len: %lld ", bzr->zones[i].len);
+		printf("\n state: %d ", bzr->zones[i].cond);
+		printf("\n reset recommendation: %d ", bzr->zones[i].reset);
+		printf("\n wp: %llu ", bzr->zones[i].wp);
+		printf("\n non_seq: %d ", bzr->zones[i].non_seq);
+		printf("\n-----------------------------------\n");
+	}
+	close(fd);
+	return (bzr->zones[0].wp == bzr->zones[0].start);
+}
+
+int main(int argc, char *argv[])
+{
+	char buff[BLKSZ], newbuff[BLKSZ];
+	int fd, i, j, k, ret;
+	off_t offset = 0;
+	char newch = '6', origch = '2';
+	int count = 0;
+	long nrzones;
+
+	if (argc < 3) {
+		fprintf(stderr, "\n Usage: %s filename nrzones \n", argv[0]);
+		exit(EXIT_FAILURE);
+	}
+
+	fname = argv[1];
+	nrzones = strtol(argv[2], NULL, 10);
+
+	printf("\n Opening file: %s and working with %llu zones \n", fname, nrzones);
+
+	fd = open(fname, O_RDWR|O_CREAT, S_IRWXU);
+	if (fd < 0) {
+		perror("\n Could not create file because: ");
+		printf("\n");
+		return errno;
+	}
+
+	printf("\n Opened %s ", fname);
+
+	for(i=0; i<BLKSZ; i++) {
+		buff[i] = origch;
+	}
+
+	printf("\n Conducting write verification to %d zones....", nrzones);
+	//offset = (244842496 * 512);
+
+	lseek(fd, 0, SEEK_SET);
+	for(i=0; i<nrzones; i++) {
+		for(j=0; j<NR_BLKS_IN_ZONE; j++) {
+retry:
+			ret = write(fd, buff, BLKSZ);
+			if (ret < 0) {
+				fprintf(stdout, "\n Could not write, zonenr: %d, blknr: %d", i, j);
+				perror("\n Could not write to file because: ");
+				printf("\n");
+				break;
+			}
+			if (ret < BLKSZ) {
+				printf("\n Partial write, zonenr: %d blknr: %d", i, j);
+			}
+		}
+	}
+
+	close(fd);
+	sync();
+	printf("\n Writes done!! \n");
+
+	printf("\n Read verifying the writes ......\n");
+	fd = open(fname, O_RDWR);
+	if (fd < 0) {
+		perror("\n Could not open file because: ");
+		printf("\n");
+		return errno;
+	}
+
+
+	lseek(fd, 0, SEEK_SET);
+
+	offset = 0;
+	for(i=0; i<nrzones; i++) {
+		for(j=0; j<NR_BLKS_IN_ZONE; j=j+2) {
+			ret = read(fd, buff, BLKSZ);
+			if (ret < 0) {
+				perror("\n b) Could not read to file because: ");
+				printf("\n");
+				return errno;
+			}
+			for(k=0; k<BLKSZ; k++) {
+				if (buff[k] != origch) {
+					printf("\n b) Expected val: %c and found: %c for zonenr: %d  blknr: %d, k: %d", origch, buff[k], i, j, k);
+					printf("\n");
+					return -1;
+				}
+			}
+		}
+	}
+	printf("\n");
+	close(fd);
+
+	printf("\n Conducting overwrites verification! .......");
+	fd = open(fname, O_RDWR);
+	if (fd < 0) {
+		perror("\n Could not open file because: ");
+		printf("\n");
+		return errno;
+	}
+	lseek(fd, 0, SEEK_SET);
+
+	for(i=0; i<BLKSZ; i++) {
+		newbuff[i] = newch;
+	}
+
+	offset = 0;
+	lseek(fd, offset, SEEK_SET);
+	for(i=0; i<nrzones; i++) {
+		for(j=0; j<NR_BLKS_IN_ZONE; j=j+2) {
+			ret = write(fd, newbuff, BLKSZ);
+			if (ret < 0) {
+				perror("\n Could not write to file because: ");
+				printf("\n");
+				return errno;
+			}
+			if (ret < BLKSZ) {
+				printf("\n Partial write, zonenr: %d blknr: %d", i, j);
+				return(-1);
+			}
+			ret = read(fd, buff, BLKSZ);
+			if (ret < 0) {
+				perror("\n b) Could not read to file because: ");
+				printf("\n");
+				return errno;
+			}
+		}
+	}
+
+	close(fd);
+	printf("\n Overwrites done ! \n");
+	sync();
+	
+	printf("\n Read verifying the writes ......\n");
+	fd = open(fname, O_RDWR);
+	if (fd < 0) {
+		perror("\n Could not open file because: ");
+		printf("\n");
+		return errno;
+	}
+
+
+	lseek(fd, 0, SEEK_SET);
+
+	offset = 0;
+	for(i=0; i<nrzones; i++) {
+		for(j=0; j<NR_BLKS_IN_ZONE; j=j+2) {
+			ret = read(fd, buff, BLKSZ);
+			if (ret < 0) {
+				perror("\n b) Could not read to file because: ");
+				printf("\n");
+				return errno;
+			}
+			for(k=0; k<BLKSZ; k++) {
+				if (buff[k] != newch) {
+					printf("\n b) Expected val: %c and found: %c for zonenr: %d  blknr: %d, k: %d", newch, buff[k], i, j, k);
+					printf("\n");
+					return -1;
+				}
+			}
+
+			ret = read(fd, buff, BLKSZ);
+			if (ret < 0) {
+				perror("\n Could not read to file because: ");
+				printf("\n");
+				return errno;
+			}
+			for(k=0; k<BLKSZ; k++) {
+				if (buff[k] != origch) {
+					printf("\n b) Expected val: %c and found: %c for zonenr: %d  blknr: %d, k: %d", origch, buff[k], i, j, k);
+					printf("\n");
+					return -1;
+				}
+			}
+
+		}
+	}
+	printf("\n");
+	close(fd);
+	return 0;
+}
-- 
2.34.1

